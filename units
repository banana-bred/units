#!/bin/zsh

# =================================================================================================================================
#  Convert units
# =================================================================================================================================

local PROGRAM=$(basename "${(%):-%x}")

# -- prefixes
local nano=1e-9
local micro=1e-6
local kilo=1e3
local mega=1e6
local giga=1e9

# -- physical constants constants
local kboltz=1.38649e-23   # -- Boltzmann constant (J/K)
local hbar=1.054571817e-34 # -- hbar (J*s)
local c=299792458          # -- speed of ligh in vacuum (m/s)

# -- energy
local au_eV=27.211386245988
local au_J=4.3597447222071e-18
local au_K=$(($au_J / $kboltz))
local au_Ryd=2.0
local au_invcm=$((8065.54445 * au_eV))
local au_Hz=6584238941130000
# local au_Hz=$(( $au_invcm * 3e10 ))

# -- distance
local au_ang=0.52918

# -- mass
local lb_kg=0.4535924

usage() {
    # Prints general usage of the script.

    cat <<help

$PROGRAM

    Converts a real number from one unit to another

    usage: ${PROGRAM}  [operation] NUM FROM TO
        NUM:  a number
        FROM: units of NUM
        TO:   units to which we want to convert NUM

    operations:
        -h               Show this message.

    Valid conversion units:

        [mass]

            lb       :: pounds
            kg       :: kilograms

        [energy]

            hartree  :: Hartree atomic units (au)
            rydberg  :: Rydberg
            eV       :: electron volts
            J        :: Joules
            C        :: Celcius (E=kT)
            K        :: Kelving (E=kT)
            invcm    :: Wavenumbers (cm^-1)
            Hz       :: Hertz (frequency)

        [distance]

            ym       :: yoctometers (1e-24 m)
            zm       :: zeptometers (1e-21 m)
            am       :: attometers  (1e-18 m)
            fm       :: femtometers (1e-15 m)
            pm       :: picometers  (1e-12 m)
            nm       :: nanometers  (1e-9  m)
            μm       :: micrometers (1e-6  m)
            mm       :: millimeters (1e-3  m)
            cm       :: centimeters (1e-2  m)
            dm       :: decimeters  (1e-1  m)
            m        :: meters
            km       :: kilometers  (1e+3  m)

        Note: Distance and energy can be related to each other through the relation

            c = λ*ν,

        where λ is a wavelength (meters), ν is a frequency (Hz), and c is the speed of
        light in a vacuum ($c m/s) which means the following is a valid implementation
        of ${PROGRAM} :

            ${PROGRAM} 1 ev μm

help
}

die() {
  # Raises an error message and exits.
  # param: $1: $error_message: error message

  local exit_code=1
  local error_message="$1"

	echo "${PROGRAM}: ${error_message}" 1>&2

  exit "${exit_code}"
	return
}

F2C() {
	local F="$1"
	local C=$(( ($F - 32) * 5 / 9 ))
	echo "$C"
}

C2F() {
	local C="$1"
	local F=$(( ($C / 5 * 9) + 32 ))
	echo "$F"
}

length_from() {    # <-- length units
	local val="$1"
  local FROM="$2"

	case $FROM in
		ym)       val=$(($val * 1e-24))                            ;;
		zm)       val=$(($val * 1e-21))                            ;;
		am)       val=$(($val * 1e-18))                            ;;
		fm)       val=$(($val * 1e-15))                            ;;
		pm)       val=$(($val * 1e-12))                            ;;
		ang*)     val=$(($val * 1e-10))                            ;;
		nm)       val=$(($val * 1e-9))                             ;;
		μm)       val=$(($val * 1e-6))                             ;;
		mm)       val=$(($val * 1e-3))                             ;;
		cm)       val=$(($val * 1e-2))                             ;;
		dm)       val=$(($val * 1e-1))                             ;;
		m)                                                         ;;
		km)       val=$(($val * 1e3))                              ;;
		bohr)     val=$(($val * $au_ang * 1e-10))                  ;;
	esac

  echo "${val}" # --> meters

}

length_to() {
  local val="$1" # <-- meters
  local TO="$2"

	case $TO in
		ym)   val=$(($val * 1e24))           ;;
		zm)   val=$(($val * 1e21))           ;;
		am)   val=$(($val * 1e18))           ;;
		fm)   val=$(($val * 1e15))           ;;
		pm)   val=$(($val * 1e12))           ;;
		ang*) val=$(($val * 1e10))           ;;
		nm)   val=$(($val * 1e9))            ;;
		μm)   val=$(($val * 1e6))            ;;
		mm)   val=$(($val * 1e3))            ;;
		cm)   val=$(($val * 1e2))            ;;
		dm)   val=$(($val * 1e1))            ;;
		m)                                   ;;
		km)   val=$(($val * 1e-3))            ;;
		bohr) val=$(($val / $au_ang * 1e10)) ;;
	esac

	echo "${val}"  # --> length units

}

energy_from() {    # <-- energy units
	local val="$1"
	local FROM="$2"

	case $FROM in
		ev)       val=$(($val / $au_eV))                 ;;
		hartree*)                                        ;;
		ryd*)     val=$(($val / $au_Ryd))                ;;
		j*)       val=$(($val / $au_J))                  ;;
		c|cel*)   val=$((($val + 273.15)/ $au_K))        ;;
		k|kel*)   val=$(($val / $au_K))                  ;;
		f|fahr*)  val=$((($(F2C $val) + 273.15)/ $au_K)) ;;
		invcm*)   val=$(($val / $au_invcm))              ;;
		hz)       val=$(($val / $au_Hz))                 ;;
		mhz)      val=$(($val * $mega / $au_Hz))         ;;
		ghz)      val=$(($val * $giga / $au_Hz))         ;;
		*) usage &&  die "I don't know how to convert $FROM to something else" ;;
	esac

  echo "${val}" # --> atomic units (au)

}

energy_to() {     # <-- atomic units
  local val="$1"
  local TO="$2"

	case $TO in
		ev)       val=$(($val * $au_eV))                ;;
	  hartree*)                                       ;;
		ryd*)     val=$(($val * $au_Ryd))               ;;
		j*)       val=$(($val * $au_J))                 ;;
		c|cel)    val=$(($val * $au_K - 273.15))        ;;
		k|kel*)   val=$(($val * $au_K))                 ;;
		f|fahr*)  val=$(C2F $(($val * $au_K - 273.15))) ;;
		invcm*)   val=$(($val * $au_invcm))             ;;
		hz)       val=$(($val * $au_Hz))                ;;
		mhz)      val=$(($val / $mega * $au_Hz))        ;;
		ghz)      val=$(($val / $giga * $au_Hz))        ;;
		*) usage &&  die "I don't know how to convert to '$TO'" ;;
	esac

	echo ${val} # --> energy units

}

mass_from() {       # <-- mass units
	local val="$1"
	local FROM="$2"

	case $FROM in
		lb*)
			val=$(($val * $lb_kg)) || exit 1
			FROM="lbs"
			;;
		kg*)
			FROM="kg"
			;;
		*)
			usage
			die "I don't know how to convert $FROM to something else"
			;;
	esac

	echo ${val} # --> kg
}

mass_to() {
	local val="$1" # <-- kg
	local TO="$2"

	case $TO in
		lb*)
			val=$(($val / $lb_kg)) || exit 1
			;;
		kg*)
			;;
	esac

	echo ${val}  # --> mass units

}

main() {

  local val
	local intype
	local outtype

  # -- Parses command-line arguments in order to perform the stuff.

	while :; do
		case $1 in

			-h|--help)
				usage
				exit 0
				;;
			--)
				shift
				break
				;;
      -?*)
        printf 'WARN: Unknown option (ignored): %s\n' "${1}"
        ;;
			*)
				break
				;;

		esac
		shift

	done

	NUM="${@: -3:1}"
	FROM="${@: -2:1}"
	TO="${@: -1:1}"

	case "${FROM:l}" in
		lb*|kg)
			intype="mass"
			;;
		ev|hartree*|ryd*|j*|f|fahr*|c|cel*|k|kel*|invcm*|?hz|hz)
			intype="energy"
			;;
		ym|zm|am|fm|pm|ang*|bohr|nm|μm|mm|cm|dm|m|km)
			intype="length"
			;;
		*)
			die "'${FROM}' is not a unit I can convert"
			;;
	esac

	case "${TO:l}" in
		lb*|kg)
			outtype="mass"
			;;
		ev|hartree*|ryd*|j*|f|fahr*|c|cel*|k|kel*|invcm*|?hz|hz)
			outtype="energy"
			;;
		ym|zm|am|fm|pm|ang*|bohr|nm|μm|mm|cm|dm|m|km)
			outtype="length"
			;;
		*)
			die "'${TO}' is not a unit I can convert"
			;;
	esac

  if [[ "${intype}" != "${outtype}" ]] ; then
    case "${intype}" in
      length)
        [[ "${outtype}" = "energy" ]] || die "Failed trying to convert ${intype} to ${outtype}."
        val=$(( ($c / $("${intype}"_from "${NUM}" "${FROM:l}")) / $au_Hz ))
        "${outtype}"_to "${val}" "${TO:l}"
        ;;
      energy)
        [[ "${outtype}" = "length" ]] || die "Failed trying to convert ${intype} to ${outtype}."
        val=$(( $c / ($("${intype}"_from "${NUM}" "${FROM:l}") * $au_Hz)  ))
        "${outtype}"_to "${val}" "${TO:l}"
        ;;
      *) die "Failed trying to convert ${intype} to ${outtype}." ;;
    esac
  else
    "${outtype}"_to $("${intype}"_from "${NUM}" "${FROM:l}") "${TO:l}"
  fi

}

main "$@"
